class Level{
    field int number, width, height, leftPanel, UpPanel;
    field Array rows, columns, expectedSolution, solution;

    constructor Level new(int level){ // (number, width, height, leftPanel, UpPanel, columns, rows, expectedSolution)
        var String r, c, sol, sol2;
        if (level = 1){
            let r = "10 10 1 6 1 2";
            let c = "10 10 10 10 10 1 2 1 1 1 3 1";
            let sol = "110001000100010001110101";
            let sol2 = "000000000000000000000000";
            do createLevel(1, 4, 6, 2, 1, r, c, sol, sol2);
        }
        if (level = 2){
            let r = "10 10 1 3 2 3 1 2 1";
            let c = "3 10 1 2 6 1";
            let sol = "011101111111100101000";
            let sol2 = "000000000000000000000";
            do createLevel(2, 7, 3, 2, 1, r, c, sol, sol2);
        }
        if (level = 3){
            let r = "10 10 10 10 10 10 1 10 10 10 10 10 10 10 10 10 10 10 1 1 2 10 1 10 10 1 10 10 10 10 3 1 1 1 7 4 2 1 1";
            let c = "10 10 10 1 10 10 10 10 10 10 1 10 10 10 10 10 1 3 1 5 10 3 4 2 1 4 1 1";
            let sol = "000111000011110000100011000101011101100011110011111001000010000";
            let sol2 = "000000000000000000000000000000000000000000000000000000000000000";
            do createLevel(3, 9, 7, 4, 3, r, c, sol, sol2);
        }
        if (level = 4){
            let r = "10 10 10 10 1 10 10 10 10 10 10 10 10 1 7 5 8 4 2 2 1 1";
            let c = "10 2 10 10 10 10 10 10 3 1 3 4 8 6 4 1";
            let sol = "011100000110100000011100000011110000011111111011111100011110000000100000";
            let sol2 = "000000000000000000000000000000000000000000000000000000000000000000000000";
            do createLevel(4, 9, 8, 2, 2, r, c, sol, sol2);
        }
        if (level = 5){
            let r = "10 10 10 10 10 10 10 10 10 2 10 10 10 2 10 10 10 10 10 10 10 10 10 10 2 3 3 1 3 10 3 1 3 3 2 10 10 10 10 10 10 10 1 2 2 2 2 1 2 2 2 2 1 10 10 10 10 10 10 3 3 2 1 2 1 1 1 2 1 2 3 3";
            let c = "10 10 10 10 10 1 10 10 10 10 10 10 10 10 10 1 1 10 1 3 10 10 10 10 10 10 10 10 1 3 10 3 2 10 10 10 10 2 10 1 3 1 3 3 1 2 2 2 2 1 5 3 1 3 1 1 3 1 3 2 2 2 1 2 3";
            let sol = "0000100010000000111011100000010101010000101110111010111000000011110100111001011110110110111000110001100000110000011000110000000110010000000001001101111101100011100011100";
            let sol2 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            do createLevel(5, 13, 13, 5, 4, r, c, sol, sol2);
        }
        if (level = 6){
            let r = "10 10 10 10 10 10 2 2 2 1 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1 1 2 1 1 4 10 10 2 2 10 10 10 10 10 10 10 10 10 1 2 2 3 2 1 1 2 10 3 4 1 2 4 5 10 10 10 10 10 2 2 1 1 1 4 1 1 5 1 2 9 4 2 2";
            let c = "10 10 10 2 1 1 10 10 10 10 10 10 10 10 1 3 1 1 1 2 10 3 10 10 1 10 10 1 1 1 3 4 1 10 1 10 1 1 2 10 2 2 1 1 1 4 2 3 6 2 3 2 3 2 2 2 2 1 1 4 1 5 3 2 2";
            let sol = "000000000011100000101000110110001110101100011011000101001011010100111001011100100111101001011001001111001000110000111100011100100011101111111000011111100011000001110010101110011000011011000110000";
            let sol2 = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            do createLevel(6, 15, 13, 5, 4, r, c, sol, sol2);
        }
        
        do r.dispose();
        do c.dispose();
        do sol.dispose();
        do sol2.dispose();
        return this;
    }

    method void createLevel(int num, int w, int h, int left, int up, String c, String r, String sol, String sol2){ // заполнение рядов и строк реализовано через сложный контруктор расширения
        var ArrayExtension arrExt;
        let number = num;
        let width = w;
        let height = h;
        let leftPanel = left;
        let UpPanel = up;

        let arrExt = ArrayExtension.newBigIntArray(c);
        let columns = arrExt.array();

        let arrExt = ArrayExtension.newBigIntArray(r);
        let rows = arrExt.array();

        let arrExt = ArrayExtension.newNotReallyBooleanArray(sol2);
        let solution = arrExt.array();

        let arrExt = ArrayExtension.newNotReallyBooleanArray(sol);
        let expectedSolution = arrExt.array();

        return;
    }

    method boolean isSolutionCorrect(){ // ОНО РАБОТАЕТ
        var int i;
        var boolean res;
        let i = 0;
        let res = true;
        while (i < (height * width - 1)){    
            if (~(solution[i] = expectedSolution[i])){ 
                let res = false;
            }
            let i = i + 1;
        }
		return res;
    }


    method int number(){
        return number;
    }

    method int width(){
        return width;
    }

    method int height(){
        return height;
    }

    method int leftPanel(){
        return leftPanel;
    }

    method int UpPanel(){
        return UpPanel;
    }

    method Array rows(){
        return rows;
    }

    method Array columns(){
        return columns;
    }

    method Array solution(){
        return solution;
    }

    method Array expectedSolution(){
        return expectedSolution;
    }

    method void dispose(){
        do expectedSolution.dispose();
        do rows.dispose();
        do columns.dispose();
        do solution.dispose();
        do Memory.deAlloc(this);
        return;
    }
}

/*
1100
0100
0100
0100
0111
0101

0111011
1111110
0101000

000111000
011110000
100011000
101011101
100011110
011111001
000010000

011100000
110100000
011100000
011110000
011111111
011111100
011110000
000100000

0000100010000
0001110111000
0001010101000
0101110111010
1110000000111
1010011100101
1110110110111
0001100011000
0011000001100
0110000000110
0100000000010
0110111110110
0011100011100

000000000011100
000101000110110
001110101100011
011000101001011
010100111001011
100100111101001
011001001111001
000110000111100
011100100011101
111111000011111
100011000001110
010101110011000
011011000110000

111000000111000
101100001101000
101111111101000
011111111110010
110101101011001
011111111110001
000110011000011
010011110001011
011000000011011
001110001111111
011001111110010
100011110000100
111110011111100
100110000000000

*/