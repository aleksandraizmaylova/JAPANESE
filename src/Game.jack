class Game{
	field int selectedCellX, selectedCellY;
	field Level level;

	constructor Game new(int levelNumber){
		let level = Level.new(levelNumber);
		let selectedCellX = 0;
		let selectedCellY = 0;
		return this;
	}

	method int selectedCell(){
		return selectedCellY * level.width() + selectedCellX;
	}
	
	method int getCellX(int cell){
		var int x;
		let x = cell;
		while (x > (level.width() - 1)){
			let x = x - level.width();
		}
		return x;
	}

	method int getCellY(int cell){
		var int x, y;
		let x = cell;
		let y = 0;
		while (x > (level.width() - 1)){
			let x = x - level.width();
			let y = y + 1;
		}
		return y;
	}

	method void start(){
		var int key;
		var boolean flag, isWon;
		do UI.drawLevel(level);
		do UI.selectEmptyCell(selectedCellX, selectedCellY);
		do Sys.wait(250);
		while (true){
			let key = Keyboard.keyPressed();
			// перемещение по "полю"
			if ((key = Keys.d()) | (key = Keys.right())){
				do move(1, 0);
				do Sys.wait(200);
			}
			if ((key = Keys.left()) | (key = Keys.a())){
				do move(-1, 0);
				do Sys.wait(200);
			}
			if ((key = Keys.up()) | (key = Keys.w())){
				do move(0, -1);
				do Sys.wait(200);
			}
			if ((key = Keys.down()) | (key = Keys.s())){
				do move(0, 1);
				do Sys.wait(200);
			}

			//закрашивание/отбеливание/зачеркивание клетки
			if (key = Keys.space()){
				do paintOrClearCell();
				do Sys.wait(200);
			}
			if (key = Keys.e()){
				do crossOrClearCell();
				do Sys.wait(200);
			}

			//конец
			if (key = Keys.enter()){
				let isWon = level.isSolutionCorrect();
				do Screen.clearScreen();
				if (isWon){
					do UI.drawWinScreen();
					do level.dispose();
					do Sys.wait(250);
					while (true){
						let key = Keyboard.keyPressed();
						if (key = Keys.enter()){
							return;
						}
					}
				} else {
					do UI.drawLoseScreen();
					do Sys.wait(250);
					let flag = true;
					while (flag){
						let key = Keyboard.keyPressed();
						if (key = Keys.enter()){
							do Screen.clearScreen();
							do recreateLevel();
							let flag = false;
							do Sys.wait(250);
						}
					}
				}
			}

			//выход
			if (key = Keys.esc()){
				do Screen.clearScreen();
				do level.dispose();
				return;
			}
		}
		return;
	}

	method void move(int deltaX, int deltaY){
		var Array sol;
		let sol = level.solution();
		if (sol[selectedCell()] = 0) { do UI.clearCell(selectedCellX, selectedCellY); } 
		if (sol[selectedCell()] = 1) { do UI.paintCell(selectedCellX, selectedCellY); } 
		if (sol[selectedCell()] = 2) { do UI.clearSelectionCrossCell(selectedCellX, selectedCellY); } 

		if (((selectedCellX + deltaX) < level.width()) & ((selectedCellX + deltaX) > -1)){
			let selectedCellX = selectedCellX + deltaX;
		}
		if (((selectedCellY + deltaY) < level.height()) & ((selectedCellY + deltaY) > -1)){
			let selectedCellY = selectedCellY + deltaY;
		}

		if (sol[selectedCell()] = 0) { do UI.selectEmptyCell(selectedCellX, selectedCellY); } 
		if (sol[selectedCell()] = 1) { do UI.selectPaintedCell(selectedCellX, selectedCellY); } 
		if (sol[selectedCell()] = 2) { do UI.drawYesCrossCell(selectedCellX, selectedCellY); }
		return;
	}

	method void paintOrClearCell(){
		var Array sol;
		let sol = level.solution();
		if (sol[selectedCell()] = 1){
			let sol[selectedCell()] = 0;
			do UI.selectEmptyCell(selectedCellX, selectedCellY);
		} else {
			let sol[selectedCell()] = 1;
			do UI.selectPaintedCell(selectedCellX, selectedCellY);
		}
		do sol.dispose();
		return;
	}

	method void crossOrClearCell(){
		var Array sol;
		let sol = level.solution();
		if (sol[selectedCell()] = 2){
			let sol[selectedCell()] = 0;
			do UI.selectEmptyCell(selectedCellX, selectedCellY);
		} else {
			let sol[selectedCell()] = 2;
			do UI.drawYesCrossCell(selectedCellX, selectedCellY);
		}
		return;
	}

	method void recreateLevel(){
        var int i;
		var Array sol;
		let sol = level.solution();
        let i = 0;
		do UI.drawLevel(level);
        while (i < (level.height() * level.width() - 1)){    
            if (sol[i] = 1){ do UI.paintCell(getCellX(i), getCellY(i)); }  
            if (sol[i] = 2){ do UI.clearSelectionCrossCell(getCellX(i), getCellY(i)); } 
            let i = i + 1;
        }
		if (sol[selectedCell()] = 0) { do UI.selectEmptyCell(selectedCellX, selectedCellY); }
		if (sol[selectedCell()] = 1) { do UI.selectPaintedCell(selectedCellX, selectedCellY); } 
		if (sol[selectedCell()] = 2) { do UI.drawYesCrossCell(selectedCellX, selectedCellY); }
		return;
	}
}