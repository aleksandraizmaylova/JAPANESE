class UI {
	static String japanese, authors, pressEnter, levels, lvl, won, lose;
	static int levelBeginRow, levelBeginCol, levelOffsetCol; 
	static int xbind, ybind, xsize, ysize, xcorrect, ycorrect;
	static int number, height, width, widthLeftPanel, heightUpPanel;
	static Array digital;	

	function void fillArrayDigital(){
		
		let digital = Array.new(132);
		// 0
		let digital[0] = 0;
		let digital[1] = 24;
		let digital[2] = 60;
		let digital[3] = 102;
		let digital[4] = 102;
		let digital[5] = 102;
		let digital[6] = 102;
		let digital[7] = 102;
		let digital[8] = 102;
		let digital[9] = 60;
		let digital[10] = 24;
		// 1
		let digital[11] = 0;
		let digital[12] = 24;
		let digital[13] = 56;
		let digital[14] = 120;
		let digital[15] = 24;
		let digital[16] = 24;
		let digital[17] = 24;
		let digital[18] = 24;
		let digital[19] = 24;
		let digital[20] = 24;
		let digital[21] = 126;
		// 2
		let digital[22] = 0;
		let digital[23] = 60;
		let digital[24] = 102;
		let digital[25] = 6;
		let digital[26] = 6;
		let digital[27] = 12;
		let digital[28] = 24;
		let digital[29] = 48;
		let digital[30] = 96;
		let digital[31] = 96;
		let digital[32] = 126;
		// 3
		let digital[33] = 0;
		let digital[34] = 60;
		let digital[35] = 102;
		let digital[36] = 102;
		let digital[37] = 12;
		let digital[38] = 28;
		let digital[39] = 6;
		let digital[40] = 102;
		let digital[41] = 102;
		let digital[42] = 102;
		let digital[43] = 60;
		// 4
		let digital[44] = 0;
		let digital[45] = 14;
		let digital[46] = 14;
		let digital[47] = 22;
		let digital[48] = 22;
		let digital[49] = 38;
		let digital[50] = 38;
		let digital[51] = 70;
		let digital[52] = 127;
		let digital[53] = 6;
		let digital[54] = 6;
		// 5
		let digital[55] = 0;
		let digital[56] = 62;
		let digital[57] = 96;
		let digital[58] = 96;
		let digital[59] = 124;
		let digital[60] = 6;
		let digital[61] = 6;
		let digital[62] = 6;
		let digital[63] = 102;
		let digital[64] = 102;
		let digital[65] = 60;
		// 6
		let digital[66] = 0;
		let digital[67] = 60;
		let digital[68] = 96;
		let digital[69] = 96;
		let digital[70] = 96;
		let digital[71] = 124;
		let digital[72] = 102;
		let digital[73] = 102;
		let digital[74] = 102;
		let digital[75] = 102;
		let digital[76] = 60;
		// 7
		let digital[77] = 0;
		let digital[78] = 126;
		let digital[79] = 6;
		let digital[80] = 6;
		let digital[81] = 12;
		let digital[82] = 12;
		let digital[83] = 24;
		let digital[84] = 24;
		let digital[85] = 48;
		let digital[86] = 48;
		let digital[87] = 48;
		// 8
		let digital[88] = 0;
		let digital[89] = 60;
		let digital[90] = 102;
		let digital[91] = 102;
		let digital[92] = 102;
		let digital[93] = 60;
		let digital[94] = 102;
		let digital[95] = 102;
		let digital[96] = 102;
		let digital[97] = 102;
		let digital[98] = 60;
		// 9
		let digital[99] = 0;
		let digital[100] = 60;
		let digital[101] = 102;
		let digital[102] = 102;
		let digital[103] = 102;
		let digital[104] = 110;
		let digital[105] = 54;
		let digital[106] = 6;
		let digital[107] = 6;
		let digital[108] = 12;
		let digital[109] = 48;
		// пробел
		let digital[110] = 0;
		let digital[111] = 0;
		let digital[112] = 0;
		let digital[113] = 0;
		let digital[114] = 0;
		let digital[115] = 0;
		let digital[116] = 0;
		let digital[117] = 0;
		let digital[118] = 0;
		let digital[119] = 0;
		let digital[120] = 0;
		// x
		let digital[121] = 0;
		let digital[122] = 0;
		let digital[123] = 0;
		let digital[124] = 34;
		let digital[125] = 20;
		let digital[126] = 8;
		let digital[127] = 20;
		let digital[128] = 34;
		let digital[129] = 0;
		let digital[130] = 0;
		let digital[131] = 0;
		
		return;
	}

	function void init(){
		let japanese = "J A P A N E S E";
		let authors = "Authors: Izmaylova Aleksandra, Pavlova Anna";
		let pressEnter = "Press Enter to play";
		let levels = "LEVELS";
		let lvl = "LEVEL ";
		let won = "YOU WON";
		let lose = "YOU LOSE";
		return;
	}

	function void clearScreen(){
	// просто очистка экрана
		do Screen.setColor(false);
		do Screen.clearScreen();
		return;
	}

	// функции отрисовки менюшек
	function void drawFrame(int x1, int y1, int x2, int y2, int d){
		//рисует рамку
		do Screen.setColor(true);
		//1 рамка
		do Screen.drawLine(x1, y1, x2, y1);
		do Screen.drawLine(x2, y1, x2, y2);
		do Screen.drawLine(x1, y2, x2, y2);
		do Screen.drawLine(x1, y1, x1, y2);
		if (~(d = 0)) {
			// 2 рамка
			do Screen.drawLine(x1 + d, y1 + d, x2 - d, y1 + d);
			do Screen.drawLine(x2 - d, y1 + d, x2 - d, y2 - d);
			do Screen.drawLine(x1 + d, y2 - d, x2 - d, y2 - d);
			do Screen.drawLine(x1 + d, y1 + d, x1 + d, y2 - d);
		}
		return;
	}

	function void drawMainMenu(){
	// нарисовать главную менюшку: название игры, "Press Enter to play", имена авторов (нас) и, если хочешь, любые визуальные приколюхи
		do UI.clearScreen();
		do UI.drawFrame(5, 5, 506, 250, 2);
		do Output.moveCursor(8, 24);
		do Output.printString(japanese);
		do Output.moveCursor(21,3);
		do Output.printString(authors);
		do Output.moveCursor(14,22);
		do Output.printString(pressEnter);
		return;
	}
	
	//если хочешь, можно разместить все 6 уровней на одной странице, тогда надо сделать только 1 из 2 следующих методов и убрать методы для стрелок
	function void drawSquareofSymbol(int i, int j, int n, boolean color){
		do Screen.setColor(color);
		do Screen.drawLine(j * 8 - n, i * 11 - n, 8 * (j + 1) + n,  i * 11 - n);
		do Screen.drawLine(8 * (j + 1) + n, i * 11 - n, 8 * (j + 1) + n, 11 * (i + 1) + n);
		do Screen.drawLine(j * 8 - n, 11 * (i + 1) + n, 8 * (j + 1) + n, 11 * (i + 1) + n);
		do Screen.drawLine(j * 8 - n, i * 11 - n, j * 8 - n, 11 * (i + 1) + n);
		return;
	}

	function void drawLevelMenu(){
	// нарисовать меню с выбором всех уровней
		var int i;
		let levelBeginRow = 15;
	    let levelBeginCol = 18;
		let levelOffsetCol = 6;
		do UI.clearScreen();
		do UI.drawFrame(5, 5, 506, 250, 2);
		do Output.moveCursor(5, 28);
		do Output.printString(levels);
		let i = 0;
		while (i < 6) {
			do Output.moveCursor(levelBeginRow, i * levelOffsetCol + levelBeginCol);
			do Output.printInt(i + 1);
			do UI.drawSquareofSymbol(levelBeginRow, i * levelOffsetCol + levelBeginCol, 3, true);
			let i = i + 1;
		}
		return;
	}
	// функции выделения кнопок на менюшке уровней

	function void highlightSelectedLevel(int level){
	// выделить текущий уровень
	// это может быть закрашивание, добавление полосочки, доп обводка и что угодно из такого
	// можно разбить на 6 отдельных методов, либо передавать номер уровня сюда, хз как удобней будет
		var int i;
		let i = 0;
		// стираем предыдущий выбор 
		while (i < 6) {
			do UI.drawSquareofSymbol(levelBeginRow, i * levelOffsetCol + levelBeginCol, 5, false);
			let i = i + 1;
		}		
		do UI.drawSquareofSymbol(levelBeginRow, (level - 1) * levelOffsetCol + levelBeginCol, 5, true);		
		return;
	}

	// функции отрисовки уровней
	// рисуем квадрат в квадрате разных цветов, чтобы была окантовка
	function void drawCell(int x, int dx, int y, ind dy, int xsize, int ysize, boolean base1, boolean base2, int type){ 
	 	var int x1, y1, x2, y2;
		do Screen.setColor(base1);
        do Screen.drawRectangle(x, y, x + xsize, y + ysize);
	 	do Screen.setColor(base2); 
		let x1 = x + dx;
		let y1 = y + dy;
		let x2 = x + xsize - dx;
		let y2 = y + ysize - dy;
		do Screen.drawRectangle(x1, y1, x2, y2);
        return;
	}

	// печатаем свои символы
	function void drawDigital(int x, int y, int d){
		var int i, j, pattern, dx, dy, dop;
		let j = 0;
		let dy = y;
		while (j < 11) {
			let i = 0;
			let dx = x;
			let pattern = 128;
			while (i < 8){
				do Screen.setColor(true);
				if ((digital[d * 11 + j] & pattern) = 0){
					do Screen.setColor(false);						
				}
				do Screen.drawPixel(dx + i, dy + j);				
				let pattern = pattern / 2;
				let i = i + 1;
			}
			let j = j + 1;
		}
		return;
	}

	function void drawLevel(int numberLevel, int heightLevel, int widthLevel, int leftPanel, int UpPanel, Array rows, Array columns){ 
		var int i, j, x, y, type;
		let number = numberLevel; 
		let height = heightLevel;
		let width = widthLevel; 
		let widthLeftPanel = leftPanel;
		let heightUpPanel = UpPanel; 

		do UI.fillArrayDigital();
		do UI.drawFrame(1, 1, 510, 255, 2);
  	    let i = 29;
		// размеры клетки		
		let xsize = 16;
		let ysize = 16;		
		if (number > 4) {
			let xsize = 16 - 2;
			let ysize = 16 - 2;
			let i = 4;
		}
		do Output.moveCursor(1, i);
		do Output.printString(lvl);
		do Output.printInt(number);

		// привязка общей сетки к Screen
		let xbind = 256 - ((widthLeftPanel + width) * xsize / 2);
		let ybind = 128 - ((height + heightUpPanel) * ysize / 2);
		let xcorrect = 4;
		let ycorrect = 3;

		do UI.buildPlayingField();
		do UI.drawDigitalUpPanel(columns);
		do UI.drawDigitalLeftPanel(rows);
		return;
	}

	function void buildPlayingField(){
		var int i, j, x, y, type;
		let i = 0;
		let j = 0;
		let x = 0;
		let y = 0;
		// рамка вокруг поля
		do UI.drawFrame(xbind - 1, ybind - 1, (width + widthLeftPanel) * xsize + xbind + 1, (height + heightUpPanel) * ysize + ybind + 1, 0);
		// печатаем ячейки
		while (j < (height + heightUpPanel)) {
			let x = i * xsize + xbind;
			let y = j * ysize + ybind;
			let type = 0;
			do UI.drawCell(x, 1, y, 1, xsize, ysize, true, false, type);	
			let i = i + 1;
			if (i  = (width + widthLeftPanel)) {
				let i = 0;
				let j = j + 1;
				let x = 0;
				let y = 0;				
			}
		}
		// выделение игрового поля вертикальной и горизонтальными линиями
		do Screen.setColor(true);
		do Screen.drawLine(xbind, (heightUpPanel * ysize) + ybind - 1, (width + widthLeftPanel) * xsize + xbind, (heightUpPanel * ysize) + ybind - 1);
		do Screen.drawLine((widthLeftPanel * xsize) + xbind - 1, ybind, (widthLeftPanel * xsize) + xbind - 1, ((height + heightUpPanel) * ysize) + ybind);
		return;
	}

		function void drawDigitalUpPanel(Array columns){
		// печатаем символы верхней панели (массив columns)
		var int y, x, i, j;
		let y = ybind + ycorrect;
		let i = 0;
		while (i < (heightUpPanel)) {
			let x = xbind + xcorrect;
			let j = 0;
			while (j < (width + widthLeftPanel)) {
				if ((columns[i * (width + widthLeftPanel) + j] > -1) & (columns[i * (width + widthLeftPanel) + j] < 11)) {
					do UI.drawDigital(x, y, columns[i * (width + widthLeftPanel) + j]);
				}
				let x = x + xsize;
				let j = j + 1;
			}
			let i = i + 1;
			let y = y + ysize;
		}
		return;
	}

	function void drawDigitalLeftPanel(Array rows){
	// печатаем символы левой панели (массив rows)
		var int y, x, i, j;
		let y = ybind + ycorrect + (heightUpPanel * ysize);
		let i = 0;
		while (i < height) {
			let x = xbind + xcorrect;
			let j = 0;
			while (j < widthLeftPanel) {
				if ((rows[i + (height * j)] < 11) & (rows[i + (height * j)] > -1)) {
					do UI.drawDigital(x, y, rows[i + (height * j)]);
				}
				let x = x + xsize;
				let j = j + 1;
			}
			let i = i + 1;
			let y = y + ysize;
		}
		return;	
	}

	function void clearSelectionCrossCell(int x, int y){
		var int x1, y1;
		let x1 = xbind + ((widthLeftPanel + x) * xsize);
		let y1 = ybind + ((heightUpPanel + y) * ysize);
		do UI.drawCell(x1, 1, y1, 1, xsize, ysize, true, false, 0);
		let y1 = y1 + ycorrect;
		let x1 = x1 + xcorrect;
        do UI.drawDigital(x1, y1, 11);
		return;
	}

	function void drawYesCrossCell(int x, int y){
	// пометить "x" выделенную клетку на нарисованном поле по заданным координатам
		var int x1, y1;
		let x1 = xbind + ((widthLeftPanel + x) * xsize);
		let y1 = ybind + ((heightUpPanel + y) * ysize);
		do UI.drawCell(x1, 3, y1, 3, xsize, ysize, true, false, 0);
		let y1 = y1 + ycorrect;
		let x1 = x1 + xcorrect;
        do UI.drawDigital(x1, y1, 11);
		return;
	}

	function void drawNoCrossCell(int x, int y){
	// убрать "x" с выделенной клетки на нарисованном поле по заданным координатам
		var int x1, y1;
		let x1 = xbind + ((widthLeftPanel + x) * xsize);
		let y1 = ybind + ((heightUpPanel + y) * ysize);
		do UI.drawCell(x1, 3, y1, 3, xsize, ysize, true, false, 0);
		return;
	}

	// так как поля разных уровней разного размера, скорее всего клетки с одними и теми же координатами будут находиться в разных местах экрана на разных уровнях
	// если понадобится, можно передавать в метод номер уровня, чтобы в зависимости от него выбиралась точка отсчета на экране
	function void selectEmptyCell(int x, int y){
	// должно выделять пустую клетку на нарисованном поле по заданным координатам
		var int x1, y1;
		let x1 = xbind + ((widthLeftPanel + x) * xsize);
		let y1 = ybind + ((heightUpPanel + y) * ysize);
		do UI.drawCell(x1, 3, y1, 3, xsize, ysize, true, false, 0);
		return;
	}

	function void selectPaintedCell(int x, int y){
	// должно выделять уже закрашенную клетку на нарисованном поле по заданным координатам
		var int x1, y1;
		let x1 = xbind + ((widthLeftPanel + x) * xsize);
		let y1 = ybind + ((heightUpPanel + y) * ysize);
		do UI.drawCell(x1, 3, y1, 3, xsize, ysize, false, true, 0);
		return;
	}

	function void clearCell(int x, int y){
	// должно очищать клетку на нарисованном поле по заданным координатам
		var int x1, y1;
		let x1 = xbind + ((widthLeftPanel + x) * xsize);
		let y1 = ybind + ((heightUpPanel + y) * ysize);
		do UI.drawCell(x1, 1, y1, 1, xsize, ysize, true, false, 0);
		return;
	}
	function void paintCell(int x, int y){
	// должно закрашивать клетку на нарисованном поле по заданным координатам
		var int x1, y1;
		let x1 = xbind + ((widthLeftPanel + x) * xsize);
		let y1 = ybind + ((heightUpPanel + y) * ysize);
		do UI.drawCell(x1, 1, y1, 1, xsize, ysize, false, true, 0);
		return;
	}

	function void drawWinScreen(){
	// нарисовать экран при победе
		do UI.drawFrame(5, 5, 506, 250, 2);
		do Output.moveCursor(8, 24);
		do Output.printString(japanese);
		do Output.moveCursor(15, 27);
		do Output.printString(won);
		return;
	}

	function void drawLoseScreen(){
	// нарисовать экран при проигрыше
		do UI.drawFrame(5, 5, 506, 250, 2);
		do Output.moveCursor(8, 24);
		do Output.printString(japanese);
		do Output.moveCursor(15, 27);
		do Output.printString(lose);
		return;
	}
}